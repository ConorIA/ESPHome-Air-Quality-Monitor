substitutions:
  aqi_co2_max_good: "800"
  aqi_co2_max_acceptable: "1200"
  aqi_pm2_5_avg_24h_max_good: "12"
  aqi_pm2_5_avg_24h_max_acceptable: "25"  # WHO 2006
  aqi_pm10_avg_24h_max_good: "25"
  aqi_pm10_avg_24h_max_acceptable: "50"  # WHO 2006
  aqi_message_bad: "Bad"
  aqi_message_acceptable: "Acceptable"
  aqi_message_good: "Good"

esphome:
  name: ${node_name}
  platform: ${node_platform}
  board: ${node_board}
  build_path: ./build/${node_name}

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "AP ${node_name}"
    password: !secret wifi_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

# For debugging purposes
text_sensor:
  - platform: template
    name: "${node_name} uptime"
    id: uptime_human
    icon: mdi:clock-start

sensor:
  - platform: uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
